@use "sass:map";
@use '../../styles/variables.module.scss';

.positionsContainer {
  margin-top: variables.spacing(md);
  overflow-x: auto;
  -webkit-overflow-scrolling: touch; // Smooth scrolling on iOS
  max-width: 100%;
  border-radius: map.get(variables.$border-radius, md);
  box-shadow: 0 1px 3px variables.color(shadow);
}

.positionsTable {
  width: 100%;
  min-width: 1200px; // Increased minimum width for more columns
  max-width: 100%;
  border-collapse: collapse;
  background: variables.bg-color(white);
  box-shadow: 0 1px 3px variables.color(shadow);
  font-size: variables.font-size(sm);
  
  @include variables.responsive(md) {
    font-size: variables.font-size(base);
  }
  
  th, td {
    border: 1px solid variables.color(border);
    padding: variables.spacing(sm);
    text-align: left;
    white-space: nowrap;
  }
  
  th {
    background: variables.bg-color(light);
    font-weight: 700;
    color: variables.text-color(secondary);
    position: sticky;
    top: 0;
    z-index: 1;
    
    &.sortable {
      cursor: pointer;
      user-select: none;
      
      &:hover {
        background-color: variables.bg-color(hover);
      }
    }
  }

  tr {
    &:nth-child(even) {
      background: variables.bg-color(light);
    }

    td {
      color: variables.text-color(primary);
  
      &.positive { color: variables.color(positive); }
      &.negative { color: variables.color(negative); }
      &.zero { color: variables.text-color(secondary); }

      .positionLabel {
        font-weight: 700;
      }

      .positionLeverage, .positionPnlPercentage {
        font-size: variables.font-size(xs);
      }
    }
  }

  tbody tr {
    &:hover {
      background-color: variables.bg-color(hover);
    }
  }
}

.position {
  margin: variables.spacing(md) 0;
}

.noData {
  text-align: center;
  padding: variables.spacing(md);
  color: variables.text-color(secondary);
  background: variables.bg-color(light);
  border-radius: map.get(variables.$border-radius, sm);
  margin: variables.spacing(md) 0;
  font-size: variables.font-size(base);
  font-style: italic;
}

// State styles
%state-cell {
  font-weight: 700;
  text-align: center;
  min-width: 80px;
}

.stateInRange {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(success);
}

.stateWarning {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(warning);
}

.stateClosed {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(negative);
}

.stateLiquidated {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(negative);
}

.stateOpen {
  @extend %state-cell;
  color: variables.color(success);
  background: rgba(variables.color(success), 0.1);
}

.stateBelow {
  @extend %state-cell;
  color: variables.color(info);
  background: rgba(variables.color(info), 0.1);
}

.stateAbove {
  @extend %state-cell;
  color: variables.color(primary);
  background: rgba(variables.color(primary), 0.1);
}

.shareButton, .chartButton {
  padding: variables.spacing(xs) variables.spacing(sm);
  border-radius: map.get(variables.$border-radius, sm);
  cursor: pointer;
  font-size: variables.font-size(sm);
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  transition: all 0.2s ease;
  margin-right: variables.spacing(xs);

  &:last-child {
    margin-right: 0;
  }

  &:active {
    transform: translateY(1px);
  }
}

.shareButton {
  background: variables.color(primary);
  color: variables.bg-color(white);
  border: none;
  min-width: 60px;

  &:hover {
    background: variables.color(hover);
  }
}

.chartButton {
  background: variables.bg-color(light);
  color: variables.text-color(primary);
  border: 1px solid variables.color(border);

  &:hover {
    background: variables.color(primary);
    color: variables.bg-color(white);
    border-color: variables.color(primary);
  }
}