@use "sass:map";
@use '../../styles/variables.module.scss';

.positionsTable {
  width: 100%;
  min-width: 1200px; // Increased minimum width for more columns
  max-width: 100%;
  border-collapse: collapse;
  background: variables.bg-color(white);
  box-shadow: 0 1px 3px variables.color(shadow);
  font-size: variables.font-size(sm);
  
  @include variables.responsive(md) {
    font-size: variables.font-size(base);
  }
  
  th, td {
    border: 1px solid variables.color(border);
    padding: variables.spacing(sm);
    text-align: left;
    white-space: nowrap;
  }
  
  th {
    background: variables.bg-color(light);
    font-weight: 700;
    color: variables.text-color(secondary);
    position: sticky;
    top: 0;
    z-index: 1;
    
    &.sortable {
      cursor: pointer;
      user-select: none;
      
      &:hover {
        background-color: variables.bg-color(hover);
      }
    }
  }

  tr {
    &:nth-child(even) {
      background: variables.bg-color(light);
    }

    td {
      color: variables.text-color(primary);
  
      &.positive { color: variables.color(positive); }
      &.negative { color: variables.color(negative); }
      &.zero { color: variables.text-color(secondary); }

      .positionLabel {
        font-weight: 700;
        cursor: pointer;
        transition: color 0.2s ease;
        
        &:hover {
          color: variables.color(primary);
        }
        
        &.invertedPair {
          color: variables.color(primary);
          
          .invertedIndicator {
            display: inline-block;
            margin-left: variables.spacing(xs);
            font-size: variables.font-size(xs);
            opacity: 0.7;
            transform: rotate(90deg);
          }
        }
      }

      .positionLeverage, .positionPnlPercentage {
        font-size: variables.font-size(xs);
      }
    }
  }

  tbody tr {
    &:hover {
      background-color: variables.bg-color(hover);
    }
  }

  @include variables.breakpoint-down(md) {
    display: block;
    width: 100%;
    overflow-x: auto;
    font-size: variables.font-size(xs);
    th, td {
      white-space: nowrap;
      padding: variables.spacing(xs) variables.spacing(sm);
    }
  }
  @include variables.breakpoint-down(sm) {
    min-width: 0;
    border: none;
    thead {
      display: none;
    }
    tbody {
      display: flex;
      flex-direction: column;
      gap: variables.spacing(sm);
    }
    tr {
      display: block;
      background: variables.bg-color(white);
      border-radius: map.get(variables.$border-radius, sm);
      box-shadow: 0 1px 3px variables.color(shadow);
      margin-bottom: variables.spacing(sm);
      border: 1px solid variables.color(border);
      padding: variables.spacing(sm);
      overflow: hidden;
    }
    td {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: none;
      padding: variables.spacing(xs) 0;
      position: relative;
      width: 100%;
      font-size: variables.font-size(base);
      background: none;
      margin-bottom: variables.spacing(xs);
      &::before {
        content: attr(data-label);
        font-weight: 600;
        color: variables.text-color(secondary);
        flex: 0 0 40%;
        text-align: left;
        font-size: variables.font-size(base);
        margin-right: variables.spacing(xs);
      }
      &:last-child {
        justify-content: flex-end;
        margin-bottom: 0;
      }
    }
    td[data-label='Actions']::before {
      display: none;
    }
    td[data-label='Status'] {
      &.stateInRange {
        background: variables.color(success) !important;
        color: variables.bg-color(white) !important;
      }
      &.stateWarning {
        background: variables.color(warning) !important;
        color: variables.bg-color(white) !important;
      }
      &.stateClosed, .stateLiquidated {
        background: variables.color(negative) !important;
        color: variables.bg-color(white) !important;
      }
      &.stateOpen {
        background: rgba(variables.color(success), 0.1) !important;
        color: variables.color(success) !important;
      }
      &.stateBelow {
        background: rgba(variables.color(info), 0.1) !important;
        color: variables.color(info) !important;
      }
      &.stateAbove {
        background: rgba(variables.color(primary), 0.1) !important;
        color: variables.color(primary) !important;
      }
      .stateInRange,
      .stateWarning,
      .stateClosed,
      .stateLiquidated,
      .stateOpen,
      .stateBelow,
      .stateAbove {
        display: inline-block;
        min-width: 0;
        width: auto;
        border-radius: 999px;
        padding: 2px 12px;
        font-size: variables.font-size(base);
        text-align: center;
        margin: 0;
        box-shadow: none;
      }
    }
    .shareButton, .chartButton {
      font-size: variables.font-size(base);
      width: 100%;
      justify-content: center;
      margin-bottom: variables.spacing(xs);
      margin-top: variables.spacing(sm);
    }
  }
}

.walletCell {
  user-select: none;
}

.walletCellContent {
  display: flex;
  align-items: center;
  gap: variables.spacing(xs);
  cursor: pointer;
  padding: variables.spacing(xs);
  border-radius: map.get(variables.$border-radius, sm);
  transition: background-color 0.2s ease, box-shadow 0.2s ease;

  &:hover {
    background: variables.bg-color(light);
  }

  &:focus {
    outline: none;
    box-shadow: 0 0 0 2px variables.color(primary);
  }

  &:active {
    background: variables.bg-color(dark);
  }
}

.copyIcon {
  color: variables.text-color(secondary);
  transition: color 0.2s ease;
  
  .walletCellContent:hover &,
  .walletCellContent:focus & {
    color: variables.color(primary);
  }
}


// State classes (shared)
%state-cell {
  font-weight: 700;
  text-align: center;
  min-width: 80px;
}

.stateInRange {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(success);
}

.stateWarning {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(warning);
}

.stateClosed {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(negative);
}

.stateLiquidated {
  @extend %state-cell;
  color: variables.bg-color(white);
  background: variables.color(negative);
}

.stateOpen {
  @extend %state-cell;
  color: variables.color(success);
  background: rgba(variables.color(success), 0.1);
}

.stateBelow {
  @extend %state-cell;
  color: variables.color(info);
  background: rgba(variables.color(info), 0.1);
}

.stateAbove {
  @extend %state-cell;
  color: variables.color(primary);
  background: rgba(variables.color(primary), 0.1);
}

.shareButton, .chartButton {
  padding: variables.spacing(xs) variables.spacing(sm);
  border-radius: map.get(variables.$border-radius, sm);
  cursor: pointer;
  font-size: variables.font-size(sm);
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  transition: all 0.2s ease;
  margin-right: variables.spacing(xs);

  &:last-child {
    margin-right: 0;
  }

  &:active {
    transform: translateY(1px);
  }
}

.shareButton {
  background: variables.color(primary);
  color: variables.bg-color(white);
  border: none;
  min-width: 60px;

  display: flex;
  align-items: center;
  gap: calc(#{variables.spacing(xs)} / 2);

  &:hover {
    background: variables.color(hover);
  }
}

.chartButton {
  background: variables.bg-color(light);
  color: variables.text-color(primary);
  border: 1px solid variables.color(border);
  min-width: 60px;
  animation: slideIn 0.2s ease-out;

  &:hover {
    background: variables.color(primary);
    color: variables.bg-color(white);
    border-color: variables.color(primary);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-10px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

// Utility class to hide elements on mobile
.hideOnMobile {
  @include variables.breakpoint-down(sm) {
    display: none !important;
  }
}
